# Fairy-Stockfish, a UCI chess variant playing engine derived from Stockfish
# Copyright (C) 2018-2022 Fabian Fichter
#
# Fairy-Stockfish is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Fairy-Stockfish is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This is a configuration file to add user-defined variants to Fairy-Stockfish.

################################################
### Usage:
# Add "load" and the file path to the SF call (e.g., "stockfish.exe load variants.ini")
# or set the UCI option "VariantPath" to the path of this file in order to load it.
# In order to validate the configuration without actually loading the variants
# run "stockfish.exe check variants.ini", which reports potential config errors.

################################################
### Variant configuration:
# The variant name needs to be specified as a section in square brackets,
# followed by its rule configurations as key-value pairs as described below.
# If you encounter problems configuring variants, please report them at:
# https://github.com/ianfab/Fairy-Stockfish/issues

### Inheritance
# If a variant is similar to a previously defined variant,
# inheritance can be used to simplify the definition. To inherit from the
# configuration of an existing variant, specify the parent variant after the child
# variant name separated by a colon, e.g., [gothic:capablanca].
# When inheritance is used, only the differences to the parent variant need to be defined,
# see the examples in this file, e.g., 3check-crazyhouse.
# When no inheritance is used, the default template applies,
# which is basically standard chess but without any predefined pieces.

### Piece types
# Firstly, the piece types for a variant need to be defined.
# For that, specify the letter used for each piece type, e.g.:
# pawn = p
#
# See the list below for all available predefined piece types (and their Betza notation):
# pawn (fmWfceF)
# knight (N)
# bishop (B)
# rook (R)
# queen (Q)
# fers (F)
# alfil (A)
# fersAlfil (FA)
# silver (FfW)
# aiwok (RNF)
# bers (RF)
# archbishop (BN)
# chancellor (RN)
# amazon (QN)
# knibis (mNcB)
# biskni (mBcN)
# kniroo (mNcR)
# rookni (mRcN)
# shogiPawn (fW)
# lance (fR)
# shogiKnight (fN)
# gold (WfF)
# dragonHorse (BW)
# clobber (cW)
# breakthrough (fmWfF)
# immobile ()
# cannon (mRcpR)
# janggiCannon (pR)
# soldier (fsW)
# horse (nN)
# elephant (nA)
# janggiElephant (nZ)
# banner (RcpRnN)
# wazir (W)
# commoner (K)
# centaur (KN)
# king (K)

### Custom pieces
# Custom pieces can be defined by using one of the available slots:
# customPiece1, customPiece2, ..., customPiece25
# E.g., pawns without double steps could be described as:
# customPiece1 = p:mfWcfF
#
# You can define custom king movements in the same way you can define another custom piece.
# E.g., to make the king move like a centaur:
# king = k:KN
# In contrast to other custom pieces the Betza notation for the king is optional though
# and defaults to a standard chess king (betza: K) when skipped, e.g.:
# king = k
#
# The movements of custom pieces can be defined using the Betza notation.
# https://www.gnu.org/software/xboard/Betza.html
# In Fairy-Stockfish only a subset of Betza notation can be used. The supported features are:
# - all base moves/atoms (W, F, etc.)
# - all directional modifiers (f, b, etc.)
# - limited and unlimited distance sliders/riders for W/R, F/B, and N directions
# - hoppers and grasshoppers for W/R and F/B directions, i.e., pR, pB, gR, and gB
# - lame leapers (n) for N, A, Z, and D directions, i.e., nN, nA, nZ, and nD

### Piece values
# The predefined and precalculated piece values can be overridden
# by specifying the pieceValueMg and pieceValueEg options, e.g.,
# pieceValueMg = p:150 n:800
# pieceValueEg = p:200 n:900
#
# For orientation, the internal predefined piece values can be found in types.h.
# A suitable piece for gauging the piece values is the rook, which internally has:
# pieceValueMg = r:1276
# pieceValueEg = r:1380

### Option types
# [bool]: boolean flag to enable/disable a feature [true, false]
# [Rank]: denotes a rank of the board [1-10]
# [File]: denotes a file of the board [1-12, a-i]
# [int]: any natural number [0, 1, ...]
# [PieceType]: a piece type [letters defined for pieces, e.g., p]
# [PieceSet]: multiple piece types [letters defined for pieces, e.g., nbrq]
# [CastlingRights]: set of castling rights [letters for castling rights as in FEN, e.g., KQkq]
# [Bitboard]: list of squares [e.g., d4 e4 d5 e5]. * can be used as wildcard for files (e.g., *1 is the first rank)
# [Value]: game result for the side to move [win, loss, draw]
# [MaterialCounting]: material counting rules for adjudication [janggi, unweighted, whitedrawodds, blackdrawodds, none]
# [CountingRule]: makruk, cambodian, or ASEAN counting rules [makruk, cambodian, asean, none]
# [ChasingRule]: xiangqi chasing rules [axf, none]
# [EnclosingRule]: reversi, ataxx, etc. enclosing rules [reversi, ataxx, quadwrangle, snort, anyside, top, none]
# - in enclosingDrop:
#  - reversi: must enclose opponent's pieces between yours by Queen move
#  - ataxx: must be adjacent to own piece by King move
#  - snort: most *not* be adjacent to opponent's piece by Wazir move
#  - anyside: must be reached by inserting from an edge and sliding to opposite edge
#  - top: must be reached by inserting from top and sliding to bottom (ie. Connect 4)
# - in flipEnclosedPieces:
#  - reversi: flip opponent's pieces enclosed between yours by Queen move
#  - quadwrangle: if a normal move *or* a drop with a friendly piece adjacent by King move, then flip opponent's pieces adjacent by King move
#  - ataxx: flip opponent's pieces adjacent by King move
# [WallingRule]: wall-placing rule [arrow, duck, edge, past, static, none]
# - arrow: copies piece movement (ie. Game of the Amazons)
# - duck: mobile square (ie. Duck chess)
# - edge: edges of board, opening up new edges (ie. Atlantis)
# - past: previous square (ie. Snailtrail)
# - static: unchanging mask (ie. Isolation)

### Additional options relevant for usage in Winboard/XBoard
# A few options only have the purpose of improving compatibility with Winboard/Xboard.
# These do not need to be specified when using other GUIs, but can be essential for Winboard/Xboard.
#
# variantTemplate: base variant to inherit GUI logic from [values: fairy, shogi, bughouse] (default: fairy)
# pieceToCharTable: mapping of piece characters to images,
#                   see https://www.gnu.org/software/xboard/whats_new/4.9.0/index.html#tag-B1 (default: -)
# pocketSize: number of pockets shown by XBoard/WinBoard for drop variants [int] (default: 0)

### Rule definition options
# maxRank: maximum rank [Rank] (default: 8)
# maxFile: maximum file [File] (default: 8)
# chess960: allow chess960 castling [bool] (default: false)
# twoBoards: pocket pieces are added from an external source, usually from a second board (e.g., bughouse) [bool] (default: false)
# startFen: FEN of starting position (default: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1)
# mobilityRegion: the mobility area can be defined via options specific to color and piece,
#                 .e.g., mobilityRegionWhiteRook, mobilityRegionBlackJanggiElephant, etc. [Bitboard]
# pawnTypes: define pieces considered as "pawns" for promotion, en passant, and n move rule [PieceSet] (default: p)
#            see promotionPawnTypes, enPassantTypes, and nMoveRuleTypes for more specific overrides.
# promotionRegionWhite: region where promotions are allowed for white [Bitboard] (default: *8)
# promotionRegionBlack: region where promotions are allowed for black [Bitboard] (default: *1)
# promotionPawnTypes: promotion pawn types for both colors [PieceSet] (default: p)
# promotionPawnTypesWhite: white promotion pawn types [PieceSet] (default: p)
# promotionPawnTypesBlack: black promotion pawn types [PieceSet] (default: p)
# promotionPieceTypes: pawn promotion options [PieceSet] (default: nbrq)
# promotionPieceTypesWhite: white pawn promotion options [PieceSet] (default: nbrq)
# promotionPieceTypesBlack: black pawn promotion options [PieceSet] (default: nbrq)
# sittuyinPromotion: enable Sittuyin-style pawn promotion [bool] (default: false)
# promotionLimit: maximum number of pieces of a type, e.g., q:1 r:2 (default: )
# promotedPieceType: mapping between unpromoted and promoted non-pawn piece types, e.g., p:g s:g (default: )
# piecePromotionOnCapture: piece promotion only allowed on captures (e.g., micro shogi) [bool] (default: false)
# mandatoryPawnPromotion: pawn promotion is mandatory [bool] (default: true)
# mandatoryPiecePromotion: piece promotion (and demotion if enabled) is mandatory [bool] (default: false)
# pieceDemotion: enable demotion of pieces (e.g., Kyoto shogi) [bool] (default: false)
# blastOnCapture: captures explode all adjacent non-pawn pieces (e.g., atomic chess) [bool] (default: false)
# blastImmuneTypes: pieces completely immune to explosions (even at ground zero) [PieceSet] (default: none)
# mutuallyImmuneTypes: pieces that can't capture another piece of same types (e.g., kings (commoners) in atomar) [PieceSet] (default: none)
# petrifyOnCaptureTypes: defined pieces are turned into wall squares when capturing [PieceSet] (default: -)
# petrifyBlastPieces: if petrify and blast combined, should pieces destroyed in the blast be petrified? [bool] (default: false)
# doubleStep: enable pawn double step [bool] (default: true)
# doubleStepRegionWhite: region where pawn double steps are allowed for white [Bitboard] (default: *2)
# doubleStepRegionBlack: region where pawn double steps are allowed for black [Bitboard] (default: *7)
# tripleStepRegionWhite: region where pawn triple steps are allowed for white [Bitboard] (default: -)
# tripleStepRegionBlack: region where pawn triple steps are allowed for black [Bitboard] (default: -)
# enPassantRegion: define region (target squares) where en passant is allowed after double steps [Bitboard] (default: AllSquares)
# enPassantTypes: define pieces able to capture en passant [PieceSet] (default: p)
# enPassantTypesWhite: define white pieces able to capture en passant [PieceSet] (default: p)
# enPassantTypesBlack: define black pieces able to capture en passant [PieceSet] (default: p)
# castling: enable castling [bool] (default: true)
# castlingDroppedPiece: enable castling with dropped rooks/kings [bool] (default: false)
# castlingKingsideFile: destination file of king after kingside castling [File] (default: g)
# castlingQueensideFile: destination file of king after queenside castling [File] (default: c)
# castlingRank: relative rank of castling [Rank] (default: 1)
# castlingKingFile: starting file of the castlingKingPiece if there can be more than one of that type [File] (default: e)
# castlingKingPiece: first piece type that participates in castling [PieceType] (default: k)
# castlingRookKingsideFile: starting file of castlingRookPieces on kingside (if not in corner) [File] (default: l)
# castlingRookQueensideFile: starting file of castlingRookPieces on queenside (if not in corner) [File] (default: a)
# castlingRookPieces: second piece type that participates in castling [PieceSet] (default: r)
# oppositeCastling: can't castle same side as opponent [bool] (default: false)
# checking: allow checks [bool] (default: true)
# dropChecks: allow checks by piece drops [bool] (default: true)
# mustCapture: captures are mandatory (check evasion still takes precedence) [bool] (default: false)
# mustDrop: drops are mandatory (e.g., for Sittuyin setup phase) [bool] (default: false)
# mustDropType: piece type for which piece drops are mandatory [PieceType] (default: *)
# pieceDrops: enable piece drops [bool] (default: false)
# dropLoop: captures promoted pieces are not demoted [bool] (default: false)
# capturesToHand: captured pieces go to opponent's hand [bool] (default: false)
# firstRankPawnDrops: allow pawn drops to first rank [bool] (default: false)
# promotionZonePawnDrops: allow pawn drops in promotion zone  [bool] (default: false)
# dropOnTop: DEPRECATED, use "enclosingDrop = top"
# enclosingDrop: require piece drop to enclose pieces [EnclosingRule] (default: none)
# enclosingDropStart: drop region for starting phase disregarding enclosingDrop (e.g., for reversi) [Bitboard]
# whiteDropRegion: restrict region for piece drops of all white pieces [Bitboard]
# blackDropRegion: restrict region for piece drops of all black pieces [Bitboard]
# sittuyinRookDrop: restrict region of rook drops to first rank [bool] (default: false)
# dropOppositeColoredBishop: dropped bishops have to be on opposite-colored squares [bool] (default: false)
# dropPromoted: pieces may be dropped in promoted state [bool] (default: false)
# dropNoDoubled: specified piece type can not be dropped to the same file (e.g. shogi pawn) [PieceType] (default: -)
# dropNoDoubledCount: specifies the count of already existing pieces for dropNoDoubled [int] (default: 1)
# immobilityIllegal: pieces may not move to squares where they can never move from [bool] (default: false)
# gating: maintain squares on backrank with extra rights in castling field of FEN [bool] (default: false)
# wallingRule: rule on where wall can be placed [WallingRule] (default: none)
# wallingRegionWhite: mask where wall squares (including duck) can be placed by white [Bitboard] (default: all squares)
# wallingRegionBlack: mask where wall squares (including duck) can be placed by black [Bitboard] (default: all squares)
# seirawanGating: allow gating of pieces in hand like in S-Chess, requires "gating = true" [bool] (default: false)
# cambodianMoves: enable special moves of cambodian chess, requires "gating = true" [bool] (default: false)
# diagonalLines: enable special moves along diagonal for specific squares (Janggi) [Bitboard]
# pass: allow passing [bool] (default: false)
# passWhite: allow passing for white [bool] (default: false)
# passBlack: allow passing for black [bool] (default: false)
# passOnStalemate: allow passing in case of stalemate [bool] (default: false)
# passOnStalemateWhite: allow passing in case of stalemate for white [bool] (default: false)
# passOnStalemateBlack: allow passing in case of stalemate for black [bool] (default: false)
# makpongRule: the king may not move away from check [bool] (default: false)
# flyingGeneral: disallow general face-off like in xiangqi [bool] (default: false)
# soldierPromotionRank: restrict soldier to shogi pawn movements until reaching n-th rank [Rank] (default: 1)
# flipEnclosedPieces: change color of pieces that are enclosed by a drop [EnclosingRule] (default: none)
# nMoveRuleTypes: define pieces resetting n move rule [PieceSet] (default: p)
# nMoveRuleTypesWhite: define white pieces resetting n move rule [PieceSet] (default: p)
# nMoveRuleTypesBlack: define black pieces resetting n move rule [PieceSet] (default: p)
# nMoveRule: move count for 50/n-move rule [int] (default: 50)
# nFoldRule: move count for 3/n-fold repetition rule [int] (default: 3)
# nFoldValue: result in case of 3/n-fold repetition [Value] (default: draw)
# nFoldValueAbsolute: result in case of 3/n-fold repetition is from white's point of view [bool] (default: false)
# perpetualCheckIllegal: prohibit perpetual checks [bool] (default: false)
# moveRepetitionIllegal: prohibit moving back and forth with the same piece nFoldRule-1 times [bool] (default: false)
# chasingRule: enable chasing rules [ChasingRule] (default: none)
# stalemateValue: result in case of stalemate [Value] (default: draw)
# stalematePieceCount: count material in case of stalemate [bool] (default: false)
# checkmateValue: result in case of checkmate [Value] (default: loss)
# shogiPawnDropMateIllegal: prohibit checkmate via shogi pawn drops [bool] (default: false)
# shatarMateRule: enable shatar mating rules [bool] (default: false)
# bikjangRule: consider Janggi bikjang (facing kings) rule [bool] (default: false)
# extinctionValue: result when one of extinctionPieceTypes is extinct [Value] (default: none)
# extinctionClaim: extinction of opponent pieces can only be claimed as side to move [bool] (default: false)
# extinctionPseudoRoyal: treat the last extinction piece like a royal piece [bool] (default: false)
# dupleCheck: when all pseudo-royal pieces are attacked, it counts as a check [bool] (default: false)
# extinctionPieceTypes: list of piece types for extinction rules, e.g., pnbrq (* means all) (default: )
# extinctionPieceCount: piece count at which the game is decided by extinction rule (default: 0)
# extinctionOpponentPieceCount: opponent piece count required to adjudicate by extinction rule (default: 0)
# flagPiece: piece type for capture the flag win rule [PieceType] (default: *)
# flagPieceWhite: piece type for capture the flag win rule [PieceType] (default: *)
# flagPieceBlack: piece type for capture the flag win rule [PieceType] (default: *)
# flagRegion: target region for capture the flag win rule [Bitboard] (default: )
# flagRegionWhite: white's target region for capture the flag win rule [Bitboard] (default: )
# flagRegionBlack: black's target region for capture the flag win rule [Bitboard] (default: )
# flagPieceCount: number of flag pieces that have to be in the flag zone [int] (default: 1)
# flagPieceBlockedWin: for flagPieceCount > 1, win if at least one flag piece in flag zone and all others occupied by pieces [bool] (default: false)
# flagMove: the other side gets one more move after one reaches the flag zone [bool] (default: false)
# flagPieceSafe: the flag piece must be safe to win [bool] (default: false)
# checkCounting: enable check count win rule (check count is communicated via FEN, see 3check) [bool] (default: false)
# connectN: number of aligned pieces for win [int] (default: 0)
# connectPieceTypes: pieces evaluated for connection rule [PieceSet] (default: *)
# connectVertical: connectN looks at Vertical rows [bool] (default: true)
# connectHorizontal: connectN looks at Horizontal rows [bool] (default: true)
# connectDiagonal: connectN looks at Diagonal rows [bool] (default: true)
# connectRegion1White: connect Region 1 to Region 2 for win. obeys connectVertical, connectHorizontal, connectDiagonal [Bitboard] (default: -)
# connectRegion2White: "
# connectRegion1Black: "
# connectRegion2Black: "
# connectNxN: connect a tight NxN square for win [int] (default: 0)
# collinearN: arrange N pieces collinearly (other squares can be between pieces) [int] (default: 0)
# connectValue: result in case of connect [Value] (default: win)
# materialCounting: enable material counting rules [MaterialCounting] (default: none)
# adjudicateFullBoard: apply material counting immediately when board is full [bool] (default: false)
# countingRule: enable counting rules [CountingRule] (default: none)
# castlingWins: Specified castling moves are win conditions. Losing these rights is losing. [CastlingRights] (default: -)

################################################
### Example for minishogi configuration that would be equivalent to the built-in variant:

# [minishogi]
# variantTemplate = shogi
# maxRank = 5
# maxFile = 5
# shogiPawn = p
# silver = s
# gold = g
# bishop = b
# dragonHorse = h
# rook = r
# bers = d
# king = k
# startFen = rbsgk/4p/5/P4/KGSBR[-] w 0 1
# pieceDrops = true
# capturesToHand = true
# promotionRegionWhite = *5
# promotionRegionBlack = *1
# doubleStep = false
# castling = false
# promotedPieceType = p:g s:g b:h r:d
# dropNoDoubled = p
# immobilityIllegal = true
# shogiPawnDropMateIllegal = true
# stalemateValue = loss
# nFoldRule = 4
# nMoveRule = 0
# perpetualCheckIllegal = true
# pocketSize = 5
# nFoldValue = loss
# nFoldValueAbsolute = true

[kings-gambit:chess]
maxRank = 8
maxFile = 8
customPiece1 = a:AD
customPiece2 = b:AF
customPiece3 = c:AW
customPiece4 = d:DF
customPiece5 = e:DW
customPiece6 = f:K
customPiece7 = g:K
customPiece8 = h:K
customPiece9 = i:K
customPiece10 = j:K
customPiece11 = k:K
customPiece12 = l:K
customPiece13 = m:K
customPiece14 = n:K
customPiece15 = o:K
customPiece16 = p:K
customPiece17 = q:K
customPiece18 = r:K
customPiece19 = s:K
customPiece20 = t:K
customPiece21 = u:K
customPiece22 = v:K
customPiece23 = w:K
customPiece24 = x:K
customPiece25 = y:K
startFen = poopoopy/ijklmnop/8/8/8/8/ABCDEFGH/IJKLMNOP w 0 1
